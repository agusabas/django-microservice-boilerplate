version: '3.8'

services:
  # Django App
  backend:
    container_name: ${COMPOSE_PROJECT_NAME:-django_qa}_microservice
    build: 
      context: .
      dockerfile: docker/Dockerfile.qa
    environment:
      - ENVIRONMENT=qa
      - POSTGRES_HOST=${DB_SERVICE_NAME:-db}
      - POSTGRES_PORT=5432
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - ${DB_SERVICE_NAME:-db}
      - redis
    env_file:
      - .envs/.env.qa
    networks:
      - app_network

  # Database (PostgreSQL)
  ${DB_SERVICE_NAME:-db}:
    image: postgres:15
    container_name: ${COMPOSE_PROJECT_NAME:-django_qa}_postgresql
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_qa:/var/lib/postgresql/data
    env_file:
      - .envs/.env.qa
    healthcheck:
       test: ["CMD-SHELL", "pg_isready -U postgres"]
       interval: 5s
       timeout: 5s
       retries: 5
    networks:
      - app_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-django_qa}_redis
    ports:
      - "6379:6379"
    env_file:
      - .envs/.env.qa
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network
      
  celery_worker:
    build: 
      context: .
      dockerfile: docker/Dockerfile.qa
    command: celery -A core worker -l INFO -Q default,bulk,scheduled --hostname=worker1@%h
    volumes:
      - .:/app
    depends_on:
      - redis
      - backend
      - ${DB_SERVICE_NAME:-db}
    env_file:
      - .envs/.env.qa
    networks:
      - app_network

  celery_beat:
    build: 
      context: .
      dockerfile: docker/Dockerfile.qa
    command: celery -A core beat -l info
    volumes:
      - .:/app
    depends_on:
      - redis
      - backend
      - ${DB_SERVICE_NAME:-db}
    env_file:
      - .envs/.env.qa
    networks:
      - app_network

volumes:
  postgres_data_qa:

networks:
  app_network:
    driver: bridge 